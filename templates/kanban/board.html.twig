{# templates/kanban/board.html.twig #}
{% extends 'base.html.twig' %}
{% block title %}Kanban â€“ {{ board.name }}{% endblock %}

{% block body %}
<script src="https://unpkg.com/sortablejs@1.15.2/modular/sortable.complete.esm.js" type="module"></script>

<style>
.board { display:grid; grid-template-columns:repeat(auto-fill,minmax(320px,1fr)); gap:16px }
.column { background:#f7f7f8; border-radius:14px; padding:16px; display:flex; flex-direction:column; max-height:80vh; overflow:auto; box-shadow:0 10px 30px rgba(15,23,42,.08) }
.column-header { display:flex; justify-content:space-between; align-items:flex-start; gap:12px }
.column-title h3 { margin:0; font-size:1.05rem; color:#0f172a }
.column-title small { display:block; margin-top:4px; color:#64748b; font-size:0.75rem; letter-spacing:0.02em }
.icon-button { background:transparent; border:0; padding:6px; border-radius:999px; cursor:pointer; line-height:1; font-size:1.1rem; color:#475569; transition:background .2s ease, transform .2s ease }
.icon-button:hover, .icon-button:focus-visible { background:rgba(148,163,184,.2); outline:none; transform:scale(1.05) }
.icon-button:active { transform:scale(0.95) }
.plus-button { width:42px; height:42px; display:flex; align-items:center; justify-content:center; font-size:1.2rem; background:#1d4ed8; color:#fff; box-shadow:0 10px 25px rgba(29,78,216,.3) }
.plus-button:hover, .plus-button:focus-visible { background:#1e40af; color:#fff }
.panel { margin-top:14px; padding:16px; border-radius:12px; background:#fff; border:1px solid #e2e8f0; box-shadow:0 16px 30px rgba(15,23,42,.08) }
.stacked-form { display:flex; flex-direction:column; gap:12px }
.stacked-form input[type="text"], .stacked-form textarea { padding:10px 12px; border-radius:10px; border:1px solid #cbd5f5; background:#fff; font-size:0.95rem; color:#0f172a; transition:border-color .2s ease, box-shadow .2s ease }
.stacked-form input[type="text"]:focus, .stacked-form textarea:focus { outline:none; border-color:#2563eb; box-shadow:0 0 0 3px rgba(37,99,235,.2) }
.stacked-form textarea { resize:vertical; min-height:80px }
.inline-actions { display:flex; gap:8px; flex-wrap:wrap }
.primary-button { background:#2563eb; color:#fff; border:0; border-radius:10px; padding:8px 16px; font-weight:600; cursor:pointer; transition:background .2s ease }
.primary-button:hover, .primary-button:focus-visible { background:#1d4ed8; outline:none }
.ghost-button { background:transparent; border:0; color:#475569; font-weight:600; padding:8px 12px; border-radius:10px; cursor:pointer }
.ghost-button:hover, .ghost-button:focus-visible { background:rgba(148,163,184,.2); outline:none }
.danger-button { background:#ef4444; color:#fff; border:0; border-radius:10px; padding:8px 16px; font-weight:600; cursor:pointer; transition:background .2s ease }
.danger-button:hover, .danger-button:focus-visible { background:#dc2626; outline:none }
.cards { display:flex; flex-direction:column; gap:12px }
.card { background:#fff; border-radius:12px; padding:14px; box-shadow:0 12px 28px rgba(15,23,42,.08); border:1px solid #e2e8f0 }
.card-header { display:flex; justify-content:space-between; gap:12px; align-items:flex-start }
.card-header .editable-trigger { font-size:0.97rem; font-weight:600; color:#0f172a }
.card-body .editable-trigger { margin:6px 0 0 0; color:#475569; font-size:0.9rem }
.card-adder { margin-top:14px }
.is-hidden { display:none !important }
.new-column { margin:24px 0 32px 0; display:flex; align-items:center; gap:16px }
.new-column-description { font-size:0.9rem; color:#475569 }
.sr-only { position:absolute; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0 }
.drag-ghost { opacity:.6 }
.drag-chosen { box-shadow:0 0 0 2px #7262ffff inset }
.board-header { display:flex; align-items:flex-start; justify-content:space-between; gap:16px; margin-bottom:24px }
.board-name { margin:0; cursor:pointer }
.editable-trigger { cursor:pointer; display:block; border-radius:8px; transition:text-decoration .2s ease }
.editable-trigger:hover { text-decoration:underline }
.editable-trigger.is-editing { cursor:text; text-decoration:none }
.editable-trigger:focus-visible { outline:3px solid rgba(37,99,235,.4); outline-offset:2px }
.editable-trigger[data-multiline="1"] { white-space:pre-wrap }
.editable-trigger.is-placeholder { color:#94a3b8; font-style:italic }
.delete-form { margin:0 }
.delete-button { width:28px; height:28px; font-size:0.9rem; color:#94a3b8; background:transparent }
.delete-button:hover, .delete-button:focus-visible { color:#475569; background:rgba(148,163,184,.18); outline:none }
</style>

<main class="container">
  <header class="board-header">
    <h1
      class="board-name editable-trigger"
      tabindex="0"
      data-editable="board"
      data-single-line="1"
      data-url="{{ path('kanban_board_rename', { id: board.id }) }}"
      data-token="{{ csrf_token('board_rename' ~ board.id) }}"
      data-current-value="{{ board.name|e('html_attr') }}"
      aria-label="Edit board name"
    >{{ board.name }}</h1>
    <form
      action="{{ path('kanban_board_delete', { id: board.id }) }}"
      method="post"
      class="delete-form"
      onsubmit="return confirm('Delete board with all columns and cards?');"
    >
      <input type="hidden" name="_token" value="{{ csrf_token('board_delete' ~ board.id) }}">
      <button type="submit" class="icon-button delete-button" aria-label="Delete board">&times;</button>
    </form>
  </header>

  <section class="new-column">
    <button
      type="button"
      class="icon-button plus-button"
      aria-label="Add column"
      data-toggle-target="column-add-panel"
      aria-expanded="false"
      aria-controls="column-add-panel"
    >+</button>
    <p class="new-column-description">Add a fresh column whenever you need a new workflow lane.</p>
  </section>

  <div id="column-add-panel" class="panel is-hidden">
    <form action="{{ path('kanban_add_column', { id: board.id }) }}" method="post" class="stacked-form">
      <input type="hidden" name="_token" value="{{ csrf_token('column_add' ~ board.id) }}">
      <label class="sr-only" for="column-title-new">Column title</label>
      <input id="column-title-new" type="text" name="title" placeholder="Column title" required>
      <div class="inline-actions">
        <button type="submit" class="primary-button">Create column</button>
        <button type="button" class="ghost-button" data-toggle-target="column-add-panel">Cancel</button>
      </div>
    </form>
  </div>

  <div id="columns" class="board">
    {% for col in columns %}
      <section class="column" data-column-id="{{ col.id }}" id="column-{{ col.id }}">
        <div class="column-header">
          <div class="column-title">
            <span
              class="editable-trigger"
              tabindex="0"
              data-editable="column"
              data-single-line="1"
              data-url="{{ path('kanban_column_rename', { id: col.id }) }}"
              data-token="{{ csrf_token('column_rename' ~ col.id) }}"
              data-current-value="{{ col.title|e('html_attr') }}"
              aria-label="Edit column title"
            >{{ col.title }}</span>
          </div>
          <form
            action="{{ path('kanban_column_delete', { id: col.id }) }}"
            method="post"
            class="delete-form"
            onsubmit="return confirm('Delete column and its cards?');"
          >
            <input type="hidden" name="_token" value="{{ csrf_token('column_delete' ~ col.id) }}">
            <button type="submit" class="icon-button delete-button" aria-label="Delete column">&times;</button>
          </form>
        </div>

        {% set columnCards = cardsByCol[col.id] ?? [] %}
        <div class="cards" data-column-cards>
          {% for card in columnCards %}
            <article class="card" data-card-id="{{ card.id }}" id="card-{{ card.id }}">
              <div class="card-header">
                <span
                  class="editable-trigger"
                  tabindex="0"
                  id="card-title-{{ card.id }}-display"
                  data-editable="card-title"
                  data-single-line="1"
                  data-url="{{ path('kanban_card_rename', { id: card.id }) }}"
                  data-token="{{ csrf_token('card_rename' ~ card.id) }}"
                  data-card-id="{{ card.id }}"
                  data-companion="#card-description-{{ card.id }}-display"
                  data-current-value="{{ card.title|e('html_attr') }}"
                  aria-label="Edit card title"
                >{{ card.title }}</span>
                <form
                  action="{{ path('kanban_card_delete', { id: card.id }) }}"
                  method="post"
                  class="delete-form"
                  onsubmit="return confirm('Delete card?');"
                >
                  <input type="hidden" name="_token" value="{{ csrf_token('card_delete' ~ card.id) }}">
                  <button type="submit" class="icon-button delete-button" aria-label="Delete card">&times;</button>
                </form>
              </div>
              <div class="card-body">
                <p
                  id="card-description-{{ card.id }}-display"
                  class="editable-trigger card-description{% if card.description is empty %} is-placeholder{% endif %}"
                  tabindex="0"
                  data-editable="card-description"
                  data-multiline="1"
                  data-url="{{ path('kanban_card_rename', { id: card.id }) }}"
                  data-token="{{ csrf_token('card_rename' ~ card.id) }}"
                  data-card-id="{{ card.id }}"
                  data-companion="#card-title-{{ card.id }}-display"
                  data-placeholder="Click to add details"
                  data-current-value="{{ card.description|default('')|e('html_attr') }}"
                  aria-label="Edit card description"
                >{{ card.description ?: 'Click to add details' }}</p>
              </div>

            </article>
          {% endfor %}
        </div>

        <div class="card-adder">
          <button
            type="button"
            class="icon-button plus-button"
            aria-label="Add card"
            data-toggle-target="add-card-{{ col.id }}"
            aria-expanded="false"
            aria-controls="add-card-{{ col.id }}"
          >+</button>
          <div id="add-card-{{ col.id }}" class="panel is-hidden">
            <form class="stacked-form" action="{{ path('kanban_card_add', { id: col.id }) }}" method="post">
              <input type="hidden" name="_token" value="{{ csrf_token('card_add' ~ col.id) }}">
              <label class="sr-only" for="card-add-title-{{ col.id }}">Card title</label>
              <input id="card-add-title-{{ col.id }}" type="text" name="title" placeholder="Card title" required>
              <label class="sr-only" for="card-add-description-{{ col.id }}">Card description</label>
              <textarea id="card-add-description-{{ col.id }}" name="description" placeholder="Optional description"></textarea>
              <div class="inline-actions">
                <button type="submit" class="primary-button">Create card</button>
                <button type="button" class="ghost-button" data-toggle-target="add-card-{{ col.id }}">Cancel</button>
              </div>
            </form>
          </div>
        </div>
      </section>
    {% endfor %}
  </div>
</main>

<script type="module">
import Sortable from 'https://unpkg.com/sortablejs@1.15.2/modular/sortable.core.esm.js';

const csrf = '{{ csrf_token("kanban") }}';

// sorting/moving columns
new Sortable(document.getElementById('columns'), {
  animation: 150,
  ghostClass: 'drag-ghost',
  chosenClass: 'drag-chosen',
  handle: '.column-header',
  onEnd: async () => {
    const ids = [...document.querySelectorAll('#columns .column')].map(c => parseInt(c.dataset.columnId));
    await fetch('{{ path("kanban_reorder_columns") }}', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ orderedColumnIds: ids, _token: csrf })
    });
  }
});

// sorting/moving cards
document.querySelectorAll('[data-column-cards]').forEach(el => {
  new Sortable(el, {
    group: 'cards',
    animation: 150,
    ghostClass: 'drag-ghost',
    chosenClass: 'drag-chosen',
    onAdd: onChange, onUpdate: onChange
  });
});

async function onChange(evt) {
  const cardEl = evt.item;
  const cardId = parseInt(cardEl.dataset.cardId);
  const toColumnId = parseInt(evt.to.closest('.column').dataset.columnId);
  const newIndex = [...evt.to.children].indexOf(cardEl);

  await fetch('{{ path("kanban_move_card") }}', {
    method:'POST', headers:{'Content-Type':'application/json'},
    body: JSON.stringify({ cardId, toColumnId, newIndex, _token: csrf })
  });
}

const toggleButtons = document.querySelectorAll('[data-toggle-target]');
toggleButtons.forEach(btn => {
  ['mousedown','touchstart'].forEach(evtName => btn.addEventListener(evtName, evt => evt.stopPropagation()));
  btn.addEventListener('click', () => {
    const targetId = btn.dataset.toggleTarget;
    if (!targetId) return;
    const panel = document.getElementById(targetId);
    if (!panel) return;

    const shouldShow = panel.classList.contains('is-hidden');
    panel.classList.toggle('is-hidden', !shouldShow);

    document.querySelectorAll(`[data-toggle-target="${targetId}"]`).forEach(trigger => {
      trigger.setAttribute('aria-expanded', shouldShow ? 'true' : 'false');
    });

    if (shouldShow) {
      const firstField = panel.querySelector('input, textarea');
      if (firstField) {
        firstField.focus();
      }
    }
  });
});

const inlineEditableElements = document.querySelectorAll('[data-editable]');
inlineEditableElements.forEach(setupInlineEditable);

function setupInlineEditable(el) {
  el.dataset.saving = '0';
  el.dataset.editing = el.dataset.editing ?? '0';
  const isMultiline = el.dataset.multiline === '1';
  const declaredValue = el.dataset.currentValue ?? '';
  const placeholder = el.dataset.placeholder || '';
  if (declaredValue !== '') {
    el.dataset.currentValue = declaredValue;
    setDisplayValue(el, declaredValue);
  } else if (placeholder) {
    el.dataset.currentValue = '';
    setDisplayValue(el, '');
  } else {
    const normalized = extractNormalizedValue(el, isMultiline);
    el.dataset.currentValue = normalized;
    setDisplayValue(el, normalized);
  }
  el.addEventListener('click', () => activateInlineEdit(el));
  el.addEventListener('keydown', evt => handleInlineKeydown(evt, el));
  el.addEventListener('blur', () => handleInlineBlur(el));
}

function activateInlineEdit(el) {
  if (el.dataset.editing === '1' || el.dataset.saving === '1') return;
  el.dataset.editing = '1';
  el.dataset.originalValue = el.dataset.currentValue ?? '';
  el.classList.add('is-editing');
  el.contentEditable = 'true';
  if (el.classList.contains('is-placeholder')) {
    el.textContent = '';
    el.classList.remove('is-placeholder');
  }
  requestAnimationFrame(() => {
    el.focus({ preventScroll: true });
    const selection = window.getSelection();
    if (!selection) return;
    const range = document.createRange();
    range.selectNodeContents(el);
    selection.removeAllRanges();
    selection.addRange(range);
  });
}

function handleInlineKeydown(evt, el) {
  if (el.dataset.editing !== '1') {
    if (evt.key === 'Enter' || evt.key === ' ' || evt.key === 'F2') {
      evt.preventDefault();
      activateInlineEdit(el);
    }
    return;
  }
  const isMultiline = el.dataset.multiline === '1';
  if (evt.key === 'Escape') {
    evt.preventDefault();
    cancelInlineEdit(el);
    return;
  }
  if (!isMultiline && evt.key === 'Enter') {
    evt.preventDefault();
    saveInlineEdit(el);
    el.blur();
    return;
  }
  if (isMultiline && evt.key === 'Enter' && !evt.shiftKey) {
    evt.preventDefault();
    saveInlineEdit(el);
    el.blur();
  }
}

function handleInlineBlur(el) {
  if (el.dataset.editing === '1') {
    saveInlineEdit(el);
  }
}

function cancelInlineEdit(el) {
  el.contentEditable = 'false';
  el.classList.remove('is-editing');
  el.dataset.editing = '0';
  el.dataset.saving = '0';
  const original = el.dataset.currentValue ?? '';
  setDisplayValue(el, original);
}

async function saveInlineEdit(el) {
  if (el.dataset.saving === '1') return;
  const type = el.dataset.editable;
  const isMultiline = el.dataset.multiline === '1';
  const newValue = extractNormalizedValue(el, isMultiline);
  const previousValue = el.dataset.currentValue ?? '';

  if (type === 'board' && newValue === '') {
    alert('Board name cannot be empty.');
    cancelInlineEdit(el);
    return;
  }
  if (type === 'column' && newValue === '') {
    alert('Column title cannot be empty.');
    cancelInlineEdit(el);
    return;
  }
  if (type === 'card-title' && newValue === '') {
    alert('Card title cannot be empty.');
    cancelInlineEdit(el);
    return;
  }

  if (newValue === previousValue) {
    finalizeInlineEdit(el, previousValue);
    return;
  }

  const url = el.dataset.url;
  const token = el.dataset.token;
  if (!url || !token) {
    finalizeInlineEdit(el, previousValue);
    return;
  }

  const payload = new URLSearchParams();
  payload.append('_token', token);

  if (type === 'board') {
    payload.append('name', newValue);
  } else if (type === 'column') {
    payload.append('title', newValue);
  } else if (type === 'card-title' || type === 'card-description') {
    const companion = getCompanionElement(el);
    const companionValue = companion ? (companion.dataset.currentValue ?? '') : '';
    let titleValue;
    let descriptionValue;

    if (type === 'card-title') {
      titleValue = newValue;
      descriptionValue = companionValue;
    } else {
      titleValue = companionValue;
      descriptionValue = newValue;
    }

    if (titleValue === '') {
      alert('Card title cannot be empty.');
      cancelInlineEdit(el);
      return;
    }

    payload.append('title', titleValue);
    payload.append('description', descriptionValue);
  } else {
    finalizeInlineEdit(el, previousValue);
    return;
  }

  el.dataset.saving = '1';

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'X-Requested-With': 'XMLHttpRequest' },
      body: payload
    });

    let result = null;
    const contentType = response.headers.get('Content-Type') || '';
    if (contentType.includes('application/json')) {
      result = await response.json();
    }

    if (!response.ok || (result && result.error)) {
      throw new Error(result?.error || 'Save failed.');
    }

    el.dataset.currentValue = newValue;
    finalizeInlineEdit(el, newValue);
  } catch (error) {
    alert(error.message);
    finalizeInlineEdit(el, previousValue);
  } finally {
    el.dataset.saving = '0';
  }
}

function finalizeInlineEdit(el, value) {
  setDisplayValue(el, value);
  el.contentEditable = 'false';
  el.classList.remove('is-editing');
  el.dataset.editing = '0';
}

function extractNormalizedValue(el, isMultiline) {
  let value = el.textContent.replace(/\u00a0/g, ' ');
  if (isMultiline) {
    value = value.replace(/\r/g, '');
    value = value.split('\n').map(line => line.replace(/\s+$/g, '')).join('\n');
    return value.trim();
  }
  return value.replace(/\s+/g, ' ').trim();
}

function setDisplayValue(el, value) {
  const placeholder = el.dataset.placeholder || '';
  if (value === '' && placeholder) {
    el.textContent = placeholder;
    el.classList.add('is-placeholder');
  } else {
    el.textContent = value;
    el.classList.remove('is-placeholder');
  }
}

function getCompanionElement(el) {
  const selector = el.dataset.companion;
  if (!selector) return null;
  return document.querySelector(selector);
}
</script>
{% endblock %}
