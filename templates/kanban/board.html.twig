{# templates/kanban/board.html.twig #}
{% extends 'base.html.twig' %}
{% block title %}Kanban â€“ {{ board.name }}{% endblock %}

{% block body %}
<script src="https://unpkg.com/sortablejs@1.15.2/modular/sortable.complete.esm.js" type="module"></script>

<style>
.content { display:flex; flex-direction:column; }
.kanban-container { display:flex; flex-direction:column; gap:24px; flex:1; min-height:0; }
.board-frame { flex:1; min-height:0; display:flex; }
.board { --column-width:320px; display:flex; flex:1; flex-wrap:nowrap; align-items:stretch; gap:16px; height:100%; overflow-x:auto; overflow-y:hidden; padding:4px 8px 16px 4px; }
.board::-webkit-scrollbar { height:8px; }
.board::-webkit-scrollbar-thumb { background:rgba(148,163,184,.35); border-radius:999px; }
.board::-webkit-scrollbar-track { background:transparent; }
.column { flex:0 0 var(--column-width); background:#f7f7f8; border-radius:14px; padding:16px; display:flex; flex-direction:column; height:100%; min-height:0; overflow:hidden; box-shadow:0 10px 30px rgba(15,23,42,.08) }
.column-header { display:flex; justify-content:space-between; align-items:flex-start; gap:12px }
.column-title h3 { margin:0; font-size:1.05rem; color:#0f172a }
.column-title small { display:block; margin-top:4px; color:#64748b; font-size:0.75rem; letter-spacing:0.02em }
.icon-button { background:transparent; border:0; padding:6px; border-radius:999px; cursor:pointer; line-height:1; font-size:1.1rem; color:#475569; transition:background .2s ease, transform .2s ease }
.icon-button:hover, .icon-button:focus-visible { background:rgba(148,163,184,.2); outline:none; transform:scale(1.05) }
.icon-button:active { transform:scale(0.95) }
.plus-button { width:42px; height:42px; display:flex; align-items:center; justify-content:center; font-size:1.2rem; background:#1d4ed8; color:#fff; box-shadow:0 10px 25px rgba(29,78,216,.3) }
.plus-button:hover, .plus-button:focus-visible { background:#1e40af; color:#fff }
.inline-actions { display:flex; gap:8px; flex-wrap:wrap }
.primary-button { background:#2563eb; color:#fff; border:0; border-radius:10px; padding:8px 16px; font-weight:600; cursor:pointer; transition:background .2s ease }
.primary-button:hover, .primary-button:focus-visible { background:#1d4ed8; outline:none }
.ghost-button { background:transparent; border:0; color:#475569; font-weight:600; padding:8px 12px; border-radius:10px; cursor:pointer }
.ghost-button:hover, .ghost-button:focus-visible { background:rgba(148,163,184,.2); outline:none }
.danger-button { background:#ef4444; color:#fff; border:0; border-radius:10px; padding:8px 16px; font-weight:600; cursor:pointer; transition:background .2s ease }
.danger-button:hover, .danger-button:focus-visible { background:#dc2626; outline:none }
.cards { display:flex; flex-direction:column; gap:12px; flex:1; overflow-y:auto; min-height:0; padding-right:4px; padding-bottom:8px }
.card { background:#fff; border-radius:12px; padding:14px; box-shadow:0 12px 28px rgba(15,23,42,.08); border:1px solid #e2e8f0 }
.card-header { display:flex; justify-content:space-between; gap:12px; align-items:flex-start }
.card-header .editable-trigger { font-size:0.97rem; font-weight:600; color:#0f172a }
.card-body .editable-trigger { margin:6px 0 0 0; color:#475569; font-size:0.9rem }
.card-adder { margin-top:14px; flex:0 0 auto }
.column-composer { background:#f8fbff; border:1px dashed #93c5fd; box-shadow:none }
.column-composer .column-header { flex-direction:column; gap:12px }
.column-composer .composer-actions { align-self:flex-start }
.card-composer { border:1px dashed #cbd5f5; background:#f1f5f9; box-shadow:none }
.composer-input { min-height:44px; border-radius:10px; border:1px solid #cbd5f5; background:#fff; padding:10px 12px; font-size:0.95rem; color:#0f172a; transition:border-color .2s ease, box-shadow .2s ease; outline:none; }
.composer-input:focus { border-color:#2563eb; box-shadow:0 0 0 3px rgba(37,99,235,.18); }
.composer-input:empty::before { content:attr(data-placeholder); color:#94a3b8; font-style:italic; pointer-events:none; }
.composer-actions { display:flex; gap:8px; flex-wrap:wrap }
.composer-hint { margin:8px 0 0; color:#94a3b8; font-size:0.75rem }
.is-hidden { display:none !important }
.column-add-tile { flex:0 0 var(--column-width); height:100%; display:flex; align-items:stretch; justify-content:center }
.column-add-button { width:100%; height:100%; border:2px dashed #93c5fd; border-radius:14px; background:#eef2ff; color:#1d4ed8; font-weight:600; font-size:0.95rem; padding:24px 16px; display:flex; flex-direction:column; align-items:center; justify-content:center; gap:8px; cursor:pointer; transition:background .2s ease, border-color .2s ease, transform .2s ease }
.column-add-button:hover, .column-add-button:focus-visible { background:#e0e7ff; border-color:#6366f1; outline:none; transform:translateY(-2px) }
.inline-add-symbol { font-size:2rem; line-height:1 }
.sr-only { position:absolute; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0 }
.drag-ghost { opacity:.6 }
.drag-chosen { box-shadow:0 0 0 2px #7262ffff inset }
.board-header { display:flex; align-items:flex-start; justify-content:space-between; gap:16px; margin-bottom:24px; flex-shrink:0 }
.board-name { margin:0; cursor:pointer }
.editable-trigger { cursor:pointer; display:block; border-radius:8px; transition:text-decoration .2s ease }
.editable-trigger:hover { text-decoration:underline }
.editable-trigger.is-editing { cursor:text; text-decoration:none }
.editable-trigger:focus-visible { outline:3px solid rgba(37,99,235,.4); outline-offset:2px }
.editable-trigger[data-multiline="1"] { white-space:pre-wrap }
.editable-trigger.is-placeholder { color:#94a3b8; font-style:italic }
.delete-form { margin:0 }
.delete-button { width:28px; height:28px; font-size:0.9rem; color:#94a3b8; background:transparent }
.delete-button:hover, .delete-button:focus-visible { color:#475569; background:rgba(148,163,184,.18); outline:none }
</style>

<main class="kanban-container">
  <header class="board-header">
    <h1
      class="board-name editable-trigger"
      tabindex="0"
      data-editable="board"
      data-single-line="1"
      data-url="{{ path('kanban_board_rename', { id: board.id }) }}"
      data-token="{{ csrf_token('board_rename' ~ board.id) }}"
      data-current-value="{{ board.name|e('html_attr') }}"
      aria-label="Edit board name"
    >{{ board.name }}</h1>
    <form
      action="{{ path('kanban_board_delete', { id: board.id }) }}"
      method="post"
      class="delete-form"
      onsubmit="return confirm('Delete board with all columns and cards?');"
    >
      <input type="hidden" name="_token" value="{{ csrf_token('board_delete' ~ board.id) }}">
      <button type="submit" class="icon-button delete-button" aria-label="Delete board">&times;</button>
    </form>
  </header>
  <div class="board-frame">
    <div id="columns" class="board">
      {% for col in columns %}
        <section class="column" data-column-id="{{ col.id }}" id="column-{{ col.id }}">
        <div class="column-header">
          <div class="column-title">
            <span
              class="editable-trigger"
              tabindex="0"
              data-editable="column"
              data-single-line="1"
              data-url="{{ path('kanban_column_rename', { id: col.id }) }}"
              data-token="{{ csrf_token('column_rename' ~ col.id) }}"
              data-current-value="{{ col.title|e('html_attr') }}"
              aria-label="Edit column title"
            >{{ col.title }}</span>
          </div>
          <form
            action="{{ path('kanban_column_delete', { id: col.id }) }}"
            method="post"
            class="delete-form"
            onsubmit="return confirm('Delete column and its cards?');"
          >
            <input type="hidden" name="_token" value="{{ csrf_token('column_delete' ~ col.id) }}">
            <button type="submit" class="icon-button delete-button" aria-label="Delete column">&times;</button>
          </form>
        </div>

        {% set columnCards = cardsByCol[col.id] ?? [] %}
        <div class="cards" data-column-cards>
          {% for card in columnCards %}
            <article class="card" data-card-id="{{ card.id }}" id="card-{{ card.id }}">
              <div class="card-header">
                <span
                  class="editable-trigger"
                  tabindex="0"
                  id="card-title-{{ card.id }}-display"
                  data-editable="card-title"
                  data-single-line="1"
                  data-url="{{ path('kanban_card_rename', { id: card.id }) }}"
                  data-token="{{ csrf_token('card_rename' ~ card.id) }}"
                  data-card-id="{{ card.id }}"
                  data-companion="#card-description-{{ card.id }}-display"
                  data-current-value="{{ card.title|e('html_attr') }}"
                  aria-label="Edit card title"
                >{{ card.title }}</span>
                <form
                  action="{{ path('kanban_card_delete', { id: card.id }) }}"
                  method="post"
                  class="delete-form"
                  onsubmit="return confirm('Delete card?');"
                >
                  <input type="hidden" name="_token" value="{{ csrf_token('card_delete' ~ card.id) }}">
                  <button type="submit" class="icon-button delete-button" aria-label="Delete card">&times;</button>
                </form>
              </div>
              <div class="card-body">
                <p
                  id="card-description-{{ card.id }}-display"
                  class="editable-trigger card-description{% if card.description is empty %} is-placeholder{% endif %}"
                  tabindex="0"
                  data-editable="card-description"
                  data-multiline="1"
                  data-url="{{ path('kanban_card_rename', { id: card.id }) }}"
                  data-token="{{ csrf_token('card_rename' ~ card.id) }}"
                  data-card-id="{{ card.id }}"
                  data-companion="#card-title-{{ card.id }}-display"
                  data-placeholder="Click to add details"
                  data-current-value="{{ card.description|default('')|e('html_attr') }}"
                  aria-label="Edit card description"
                >{{ card.description ?: 'Click to add details' }}</p>
              </div>

            </article>
          {% endfor %}
        </div>

        <div class="card-adder">
          <button
            type="button"
            class="icon-button plus-button"
            aria-label="Add card"
            data-inline-add="card"
            data-column-id="{{ col.id }}"
            data-submit-url="{{ path('kanban_card_add', { id: col.id }) }}"
            data-submit-token="{{ csrf_token('card_add' ~ col.id) }}"
          >+</button>
        </div>
      </section>
      {% endfor %}

      <div class="column-add-tile" data-column-add-tile>
        <button
          type="button"
          class="column-add-button"
          aria-label="Add column"
          data-inline-add="column"
          data-submit-url="{{ path('kanban_add_column', { id: board.id }) }}"
          data-submit-token="{{ csrf_token('column_add' ~ board.id) }}"
        >
          <span class="inline-add-symbol">+</span>
          <span>Add column</span>
        </button>
      </div>
    </div>
  </div>
</main>

<script type="module">
import Sortable from 'https://unpkg.com/sortablejs@1.15.2/modular/sortable.core.esm.js';

const csrf = '{{ csrf_token("kanban") }}';

// sorting/moving columns
const columnsContainer = document.getElementById('columns');
if (columnsContainer) {
  new Sortable(columnsContainer, {
    animation: 150,
    ghostClass: 'drag-ghost',
    chosenClass: 'drag-chosen',
    handle: '.column-header',
    onEnd: async () => {
      const ids = [...document.querySelectorAll('#columns .column[data-column-id]')]
        .map(c => parseInt(c.dataset.columnId, 10))
        .filter(Number.isFinite);
      await fetch('{{ path("kanban_reorder_columns") }}', {
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ orderedColumnIds: ids, _token: csrf })
      });
    }
  });
}

// sorting/moving cards
document.querySelectorAll('[data-column-cards]').forEach(setupCardSortable);

function setupCardSortable(container) {
  if (!container || container.dataset.sortableInit === '1') return;
  container.dataset.sortableInit = '1';
  new Sortable(container, {
    group: 'cards',
    animation: 150,
    ghostClass: 'drag-ghost',
    chosenClass: 'drag-chosen',
    onAdd: onChange,
    onUpdate: onChange
  });
}

async function onChange(evt) {
  const cardEl = evt.item;
  const cardId = parseInt(cardEl.dataset.cardId);
  const toColumnId = parseInt(evt.to.closest('.column').dataset.columnId);
  const newIndex = [...evt.to.children].indexOf(cardEl);

  await fetch('{{ path("kanban_move_card") }}', {
    method:'POST', headers:{'Content-Type':'application/json'},
    body: JSON.stringify({ cardId, toColumnId, newIndex, _token: csrf })
  });
}

const columnAddButton = document.querySelector('[data-inline-add="column"]');
if (columnAddButton) {
  registerColumnAddButton(columnAddButton);
}

document.querySelectorAll('[data-inline-add="card"]').forEach(registerCardAddButton);

function registerColumnAddButton(btn) {
  if (!btn || btn.dataset.handlerAttached === '1') return;
  btn.dataset.handlerAttached = '1';
  btn.addEventListener('click', evt => {
    evt.preventDefault();
    startColumnComposer(btn);
  });
}

function registerCardAddButton(btn) {
  if (!btn || btn.dataset.handlerAttached === '1') return;
  btn.dataset.handlerAttached = '1';
  btn.addEventListener('click', evt => {
    evt.preventDefault();
    startCardComposer(btn);
  });
}

let activeColumnComposer = null;
const activeCardComposers = new Map();

function startColumnComposer(button) {
  if (activeColumnComposer) {
    focusComposerInput(activeColumnComposer.input);
    return;
  }
  const submitUrl = button.dataset.submitUrl;
  const token = button.dataset.submitToken;
  if (!submitUrl || !token) return;

  const boardEl = document.getElementById('columns');
  if (!boardEl) return;
  const tile = button.closest('[data-column-add-tile]');

  const composer = document.createElement('section');
  composer.className = 'column column-composer';
  composer.dataset.columnComposer = '1';

  const header = document.createElement('div');
  header.className = 'column-header';
  composer.appendChild(header);

  const titleWrapper = document.createElement('div');
  titleWrapper.className = 'column-title';
  header.appendChild(titleWrapper);

  const input = document.createElement('div');
  input.className = 'composer-input';
  input.dataset.placeholder = 'Column title';
  input.dataset.composerInput = '1';
  input.contentEditable = 'true';
  input.setAttribute('role', 'textbox');
  input.setAttribute('aria-label', 'New column title');
  titleWrapper.appendChild(input);

  const actions = document.createElement('div');
  actions.className = 'inline-actions composer-actions';
  header.appendChild(actions);

  const commitBtn = document.createElement('button');
  commitBtn.type = 'button';
  commitBtn.className = 'primary-button';
  commitBtn.dataset.composerCommit = '1';
  commitBtn.textContent = 'Create column';
  actions.appendChild(commitBtn);

  const cancelBtn = document.createElement('button');
  cancelBtn.type = 'button';
  cancelBtn.className = 'ghost-button';
  cancelBtn.dataset.composerCancel = '1';
  cancelBtn.textContent = 'Cancel';
  actions.appendChild(cancelBtn);

  const hint = document.createElement('p');
  hint.className = 'composer-hint';
  hint.textContent = 'Press Enter to create. Esc to cancel.';
  composer.appendChild(hint);

  const insertionTarget = tile && tile.parentElement === boardEl ? tile : null;
  if (tile) {
    tile.classList.add('is-hidden');
  }
  if (insertionTarget) {
    boardEl.insertBefore(composer, insertionTarget);
  } else {
    boardEl.appendChild(composer);
  }
  composer.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'end' });

  const state = {
    type: 'column',
    button,
    composer,
    input,
    commitBtn,
    cancelBtn,
    submitUrl,
    token,
    board: boardEl,
    tile,
    submitting: false,
    cancelled: false
  };
  activeColumnComposer = state;

  const submit = () => submitColumnComposer(state);
  const cancel = () => cancelColumnComposer(state);

  commitBtn.addEventListener('click', submit);
  cancelBtn.addEventListener('click', cancel);
  input.addEventListener('input', () => updateComposerControls(state));
  input.addEventListener('keydown', evt => {
    if (evt.key === 'Enter') {
      evt.preventDefault();
      submit();
    } else if (evt.key === 'Escape') {
      evt.preventDefault();
      cancel();
    }
  });
  input.addEventListener('blur', () => {
    if (state.submitting || state.cancelled) return;
    submit();
  });

  updateComposerControls(state);
  focusComposerInput(input);
}

function cancelColumnComposer(state) {
  if (activeColumnComposer !== state) return;
  state.cancelled = true;
  const { composer, tile, board } = state;
  composer.remove();
  if (tile) {
    tile.classList.remove('is-hidden');
    if (board && tile.parentElement === board) {
      board.appendChild(tile);
      board.scrollTo({ left: board.scrollWidth, behavior: 'smooth' });
    }
  }
  state.button?.focus({ preventScroll: false });
  activeColumnComposer = null;
}

async function submitColumnComposer(state) {
  if (activeColumnComposer !== state || state.submitting) return;
  const title = getComposerValue(state.input);
  if (title === '') {
    cancelColumnComposer(state);
    return;
  }

  state.submitting = true;
  updateComposerControls(state);

  const payload = new URLSearchParams();
  payload.append('_token', state.token);
  payload.append('title', title);

  try {
    const response = await fetch(state.submitUrl, {
      method: 'POST',
      headers: { 'X-Requested-With': 'XMLHttpRequest' },
      body: payload
    });
    const result = await readMaybeJson(response);
    if (!response.ok || !result || result.error || !result.column) {
      throw new Error(result?.error || 'Create column failed.');
    }

    const columnEl = createColumnElement(result.column);
    state.cancelled = true;
    state.composer.replaceWith(columnEl);
    activeColumnComposer = null;

    if (state.tile) {
      state.tile.classList.remove('is-hidden');
      if (state.board) {
        state.board.appendChild(state.tile);
        state.board.scrollTo({ left: state.board.scrollWidth, behavior: 'smooth' });
      }
    } else if (state.board) {
      state.board.scrollTo({ left: state.board.scrollWidth, behavior: 'smooth' });
    }

    const cardsContainer = columnEl.querySelector('[data-column-cards]');
    if (cardsContainer) setupCardSortable(cardsContainer);
    const cardButton = columnEl.querySelector('[data-inline-add="card"]');
    if (cardButton) registerCardAddButton(cardButton);

    columnEl.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
  } catch (error) {
    alert(error.message);
    focusComposerInput(state.input);
  } finally {
    if (activeColumnComposer === state) {
      state.submitting = false;
      updateComposerControls(state);
    }
  }
}

function startCardComposer(button) {
  const columnEl = button.closest('.column');
  if (!columnEl) return;

  const columnId = parseInt(button.dataset.columnId || '', 10);
  if (!columnId) return;

  const current = activeCardComposers.get(columnId);
  if (current) {
    focusComposerInput(current.input);
    return;
  }

  const submitUrl = button.dataset.submitUrl;
  const token = button.dataset.submitToken;
  if (!submitUrl || !token) return;

  const cardsContainer = columnEl.querySelector('[data-column-cards]');
  if (!cardsContainer) return;

  const composer = document.createElement('article');
  composer.className = 'card card-composer';
  composer.dataset.cardComposer = '1';

  const input = document.createElement('div');
  input.className = 'composer-input';
  input.dataset.placeholder = 'Card title';
  input.dataset.composerInput = '1';
  input.contentEditable = 'true';
  input.setAttribute('role', 'textbox');
  input.setAttribute('aria-label', 'New card title');
  composer.appendChild(input);

  const actions = document.createElement('div');
  actions.className = 'inline-actions composer-actions';
  composer.appendChild(actions);

  const commitBtn = document.createElement('button');
  commitBtn.type = 'button';
  commitBtn.className = 'primary-button';
  commitBtn.dataset.composerCommit = '1';
  commitBtn.textContent = 'Add card';
  actions.appendChild(commitBtn);

  const cancelBtn = document.createElement('button');
  cancelBtn.type = 'button';
  cancelBtn.className = 'ghost-button';
  cancelBtn.dataset.composerCancel = '1';
  cancelBtn.textContent = 'Cancel';
  actions.appendChild(cancelBtn);

  const hint = document.createElement('p');
  hint.className = 'composer-hint';
  hint.textContent = 'Press Enter to create. Esc to cancel.';
  composer.appendChild(hint);

  cardsContainer.appendChild(composer);

  const state = {
    type: 'card',
    columnId,
    button,
    composer,
    input,
    commitBtn,
    cancelBtn,
    submitUrl,
    token,
    cardsContainer,
    submitting: false,
    cancelled: false
  };
  activeCardComposers.set(columnId, state);

  const submit = () => submitCardComposer(state);
  const cancel = () => cancelCardComposer(state);

  commitBtn.addEventListener('click', submit);
  cancelBtn.addEventListener('click', cancel);
  input.addEventListener('input', () => updateComposerControls(state));
  input.addEventListener('keydown', evt => {
    if (evt.key === 'Enter') {
      evt.preventDefault();
      submit();
    } else if (evt.key === 'Escape') {
      evt.preventDefault();
      cancel();
    }
  });
  input.addEventListener('blur', () => {
    if (state.submitting || state.cancelled) return;
    submit();
  });

  updateComposerControls(state);
  focusComposerInput(input);
}

function cancelCardComposer(state) {
  const current = activeCardComposers.get(state.columnId);
  if (current !== state) return;
  state.cancelled = true;
  state.composer.remove();
  activeCardComposers.delete(state.columnId);
}

async function submitCardComposer(state) {
  const current = activeCardComposers.get(state.columnId);
  if (current !== state || state.submitting) return;

  const title = getComposerValue(state.input);
  if (title === '') {
    cancelCardComposer(state);
    return;
  }

  state.submitting = true;
  updateComposerControls(state);

  const payload = new URLSearchParams();
  payload.append('_token', state.token);
  payload.append('title', title);
  payload.append('description', '');

  try {
    const response = await fetch(state.submitUrl, {
      method: 'POST',
      headers: { 'X-Requested-With': 'XMLHttpRequest' },
      body: payload
    });
    const result = await readMaybeJson(response);
    if (!response.ok || !result || result.error || !result.card) {
      throw new Error(result?.error || 'Create card failed.');
    }

    const cardEl = createCardElement(result.card);
    state.cancelled = true;
    state.composer.replaceWith(cardEl);
    activeCardComposers.delete(state.columnId);

    cardEl.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  } catch (error) {
    alert(error.message);
    focusComposerInput(state.input);
  } finally {
    const stillActive = activeCardComposers.get(state.columnId) === state;
    if (stillActive) {
      state.submitting = false;
      updateComposerControls(state);
    }
  }
}

function updateComposerControls(state) {
  if (!state.commitBtn) return;
  const hasValue = getComposerValue(state.input) !== '';
  state.commitBtn.disabled = !hasValue || state.submitting;
}

function getComposerValue(el) {
  return (el.textContent || '').replace(/\u00a0/g, ' ').replace(/\s+/g, ' ').trim();
}

function focusComposerInput(el) {
  requestAnimationFrame(() => {
    el.focus({ preventScroll: true });
    const selection = window.getSelection();
    if (!selection) return;
    const range = document.createRange();
    range.selectNodeContents(el);
    selection.removeAllRanges();
    selection.addRange(range);
  });
}

function readMaybeJson(response) {
  const contentType = response.headers.get('Content-Type') || '';
  if (contentType.includes('application/json')) {
    return response.json().catch(() => null);
  }
  return Promise.resolve(null);
}

function createColumnElement(data) {
  const section = document.createElement('section');
  section.className = 'column';
  section.dataset.columnId = data.id;
  section.id = `column-${data.id}`;

  const header = document.createElement('div');
  header.className = 'column-header';
  section.appendChild(header);

  const titleWrapper = document.createElement('div');
  titleWrapper.className = 'column-title';
  header.appendChild(titleWrapper);

  const titleSpan = document.createElement('span');
  titleSpan.className = 'editable-trigger';
  titleSpan.tabIndex = 0;
  titleSpan.dataset.editable = 'column';
  titleSpan.dataset.singleLine = '1';
  titleSpan.dataset.url = data.urls.rename;
  titleSpan.dataset.token = data.tokens.rename;
  titleSpan.dataset.currentValue = data.title;
  titleSpan.setAttribute('aria-label', 'Edit column title');
  titleSpan.textContent = data.title;
  titleWrapper.appendChild(titleSpan);
  setupInlineEditable(titleSpan);

  const deleteForm = document.createElement('form');
  deleteForm.action = data.urls.delete;
  deleteForm.method = 'post';
  deleteForm.className = 'delete-form';
  header.appendChild(deleteForm);

  const deleteToken = document.createElement('input');
  deleteToken.type = 'hidden';
  deleteToken.name = '_token';
  deleteToken.value = data.tokens.delete;
  deleteForm.appendChild(deleteToken);

  const deleteButton = document.createElement('button');
  deleteButton.type = 'submit';
  deleteButton.className = 'icon-button delete-button';
  deleteButton.setAttribute('aria-label', 'Delete column');
  deleteButton.textContent = '\u00D7';
  deleteForm.appendChild(deleteButton);

  attachDeleteConfirm(deleteForm, 'Delete column and its cards?');

  const cardsContainer = document.createElement('div');
  cardsContainer.className = 'cards';
  cardsContainer.dataset.columnCards = '';
  section.appendChild(cardsContainer);

  const adder = document.createElement('div');
  adder.className = 'card-adder';
  section.appendChild(adder);

  const addButton = document.createElement('button');
  addButton.type = 'button';
  addButton.className = 'icon-button plus-button';
  addButton.setAttribute('aria-label', 'Add card');
  addButton.dataset.inlineAdd = 'card';
  addButton.dataset.columnId = data.id;
  addButton.dataset.submitUrl = data.urls.add_card;
  addButton.dataset.submitToken = data.tokens.add_card;
  addButton.textContent = '+';
  adder.appendChild(addButton);

  registerCardAddButton(addButton);

  return section;
}

function createCardElement(data) {
  const article = document.createElement('article');
  article.className = 'card';
  article.dataset.cardId = data.id;
  article.id = `card-${data.id}`;

  const header = document.createElement('div');
  header.className = 'card-header';
  article.appendChild(header);

  const titleSpan = document.createElement('span');
  titleSpan.className = 'editable-trigger';
  titleSpan.tabIndex = 0;
  titleSpan.id = `card-title-${data.id}-display`;
  titleSpan.dataset.editable = 'card-title';
  titleSpan.dataset.singleLine = '1';
  titleSpan.dataset.url = data.urls.rename;
  titleSpan.dataset.token = data.tokens.rename;
  titleSpan.dataset.cardId = data.id;
  titleSpan.dataset.companion = `#card-description-${data.id}-display`;
  titleSpan.dataset.currentValue = data.title;
  titleSpan.setAttribute('aria-label', 'Edit card title');
  titleSpan.textContent = data.title;
  header.appendChild(titleSpan);
  setupInlineEditable(titleSpan);

  const deleteForm = document.createElement('form');
  deleteForm.action = data.urls.delete;
  deleteForm.method = 'post';
  deleteForm.className = 'delete-form';
  header.appendChild(deleteForm);

  const deleteToken = document.createElement('input');
  deleteToken.type = 'hidden';
  deleteToken.name = '_token';
  deleteToken.value = data.tokens.delete;
  deleteForm.appendChild(deleteToken);

  const deleteButton = document.createElement('button');
  deleteButton.type = 'submit';
  deleteButton.className = 'icon-button delete-button';
  deleteButton.setAttribute('aria-label', 'Delete card');
  deleteButton.textContent = '\u00D7';
  deleteForm.appendChild(deleteButton);

  attachDeleteConfirm(deleteForm, 'Delete card?');

  const body = document.createElement('div');
  body.className = 'card-body';
  article.appendChild(body);

  const desc = document.createElement('p');
  desc.id = `card-description-${data.id}-display`;
  desc.className = 'editable-trigger card-description';
  desc.tabIndex = 0;
  desc.dataset.editable = 'card-description';
  desc.dataset.multiline = '1';
  desc.dataset.url = data.urls.rename;
  desc.dataset.token = data.tokens.rename;
  desc.dataset.cardId = data.id;
  desc.dataset.companion = `#card-title-${data.id}-display`;
  desc.dataset.placeholder = 'Click to add details';
  desc.dataset.currentValue = data.description || '';
  desc.setAttribute('aria-label', 'Edit card description');
  body.appendChild(desc);
  setupInlineEditable(desc);

  return article;
}

function attachDeleteConfirm(form, message) {
  if (!form || form.dataset.confirmAttached === '1') return;
  form.dataset.confirmAttached = '1';
  form.addEventListener('submit', evt => {
    if (!confirm(message)) {
      evt.preventDefault();
    }
  });
}

const inlineEditableElements = document.querySelectorAll('[data-editable]');
inlineEditableElements.forEach(setupInlineEditable);

function setupInlineEditable(el) {
  el.dataset.saving = '0';
  el.dataset.editing = el.dataset.editing ?? '0';
  const isMultiline = el.dataset.multiline === '1';
  const declaredValue = el.dataset.currentValue ?? '';
  const placeholder = el.dataset.placeholder || '';
  if (declaredValue !== '') {
    el.dataset.currentValue = declaredValue;
    setDisplayValue(el, declaredValue);
  } else if (placeholder) {
    el.dataset.currentValue = '';
    setDisplayValue(el, '');
  } else {
    const normalized = extractNormalizedValue(el, isMultiline);
    el.dataset.currentValue = normalized;
    setDisplayValue(el, normalized);
  }
  el.addEventListener('click', () => activateInlineEdit(el));
  el.addEventListener('keydown', evt => handleInlineKeydown(evt, el));
  el.addEventListener('blur', () => handleInlineBlur(el));
}

function activateInlineEdit(el) {
  if (el.dataset.editing === '1' || el.dataset.saving === '1') return;
  el.dataset.editing = '1';
  el.dataset.originalValue = el.dataset.currentValue ?? '';
  el.classList.add('is-editing');
  el.contentEditable = 'true';
  if (el.classList.contains('is-placeholder')) {
    el.textContent = '';
    el.classList.remove('is-placeholder');
  }
  requestAnimationFrame(() => {
    el.focus({ preventScroll: true });
    const selection = window.getSelection();
    if (!selection) return;
    const range = document.createRange();
    range.selectNodeContents(el);
    selection.removeAllRanges();
    selection.addRange(range);
  });
}

function handleInlineKeydown(evt, el) {
  if (el.dataset.editing !== '1') {
    if (evt.key === 'Enter' || evt.key === ' ' || evt.key === 'F2') {
      evt.preventDefault();
      activateInlineEdit(el);
    }
    return;
  }
  const isMultiline = el.dataset.multiline === '1';
  if (evt.key === 'Escape') {
    evt.preventDefault();
    cancelInlineEdit(el);
    return;
  }
  if (!isMultiline && evt.key === 'Enter') {
    evt.preventDefault();
    saveInlineEdit(el);
    el.blur();
    return;
  }
  if (isMultiline && evt.key === 'Enter' && !evt.shiftKey) {
    evt.preventDefault();
    saveInlineEdit(el);
    el.blur();
  }
}

function handleInlineBlur(el) {
  if (el.dataset.editing === '1') {
    saveInlineEdit(el);
  }
}

function cancelInlineEdit(el) {
  el.contentEditable = 'false';
  el.classList.remove('is-editing');
  el.dataset.editing = '0';
  el.dataset.saving = '0';
  const original = el.dataset.currentValue ?? '';
  setDisplayValue(el, original);
}

async function saveInlineEdit(el) {
  if (el.dataset.saving === '1') return;
  const type = el.dataset.editable;
  const isMultiline = el.dataset.multiline === '1';
  const newValue = extractNormalizedValue(el, isMultiline);
  const previousValue = el.dataset.currentValue ?? '';

  if (type === 'board' && newValue === '') {
    alert('Board name cannot be empty.');
    cancelInlineEdit(el);
    return;
  }
  if (type === 'column' && newValue === '') {
    alert('Column title cannot be empty.');
    cancelInlineEdit(el);
    return;
  }
  if (type === 'card-title' && newValue === '') {
    alert('Card title cannot be empty.');
    cancelInlineEdit(el);
    return;
  }

  if (newValue === previousValue) {
    finalizeInlineEdit(el, previousValue);
    return;
  }

  const url = el.dataset.url;
  const token = el.dataset.token;
  if (!url || !token) {
    finalizeInlineEdit(el, previousValue);
    return;
  }

  const payload = new URLSearchParams();
  payload.append('_token', token);

  if (type === 'board') {
    payload.append('name', newValue);
  } else if (type === 'column') {
    payload.append('title', newValue);
  } else if (type === 'card-title' || type === 'card-description') {
    const companion = getCompanionElement(el);
    const companionValue = companion ? (companion.dataset.currentValue ?? '') : '';
    let titleValue;
    let descriptionValue;

    if (type === 'card-title') {
      titleValue = newValue;
      descriptionValue = companionValue;
    } else {
      titleValue = companionValue;
      descriptionValue = newValue;
    }

    if (titleValue === '') {
      alert('Card title cannot be empty.');
      cancelInlineEdit(el);
      return;
    }

    payload.append('title', titleValue);
    payload.append('description', descriptionValue);
  } else {
    finalizeInlineEdit(el, previousValue);
    return;
  }

  el.dataset.saving = '1';

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'X-Requested-With': 'XMLHttpRequest' },
      body: payload
    });

    let result = null;
    const contentType = response.headers.get('Content-Type') || '';
    if (contentType.includes('application/json')) {
      result = await response.json();
    }

    if (!response.ok || (result && result.error)) {
      throw new Error(result?.error || 'Save failed.');
    }

    el.dataset.currentValue = newValue;
    finalizeInlineEdit(el, newValue);
  } catch (error) {
    alert(error.message);
    finalizeInlineEdit(el, previousValue);
  } finally {
    el.dataset.saving = '0';
  }
}

function finalizeInlineEdit(el, value) {
  setDisplayValue(el, value);
  el.contentEditable = 'false';
  el.classList.remove('is-editing');
  el.dataset.editing = '0';
}

function extractNormalizedValue(el, isMultiline) {
  let value = el.textContent.replace(/\u00a0/g, ' ');
  if (isMultiline) {
    value = value.replace(/\r/g, '');
    value = value.split('\n').map(line => line.replace(/\s+$/g, '')).join('\n');
    return value.trim();
  }
  return value.replace(/\s+/g, ' ').trim();
}

function setDisplayValue(el, value) {
  const placeholder = el.dataset.placeholder || '';
  if (value === '' && placeholder) {
    el.textContent = placeholder;
    el.classList.add('is-placeholder');
  } else {
    el.textContent = value;
    el.classList.remove('is-placeholder');
  }
}

function getCompanionElement(el) {
  const selector = el.dataset.companion;
  if (!selector) return null;
  return document.querySelector(selector);
}
</script>
{% endblock %}
